name: CI Pipeline

on:
  push:
    branches:
      - '*'  # Runs on push to any branch
  pull_request:
    branches:
      - '*'  # Runs on pull request to any branch

jobs:
  run-tests:
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: taskmaster
          POSTGRES_USER: swen610
          POSTGRES_PASSWORD: whowatchesthewatchmen
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U swen610"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # container:
    #   image: kalrabb/swen344-pg-py-base:latest
    #   options: --entrypoint "/bin/bash"  # Start with bash to allow custom commands (if needed)

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # - name: Install Git and Curl
    #   run: sudo apt-get update && sudo apt-get install -y git curl

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python3 -m pip install -q --upgrade pip
        python3 -m pip install -qr requirements.txt
        
    - name: Configure credentials
      run: cp config/gitlab-credentials.yml config/db.yml

    - name: Check Python version
      run: python3 --version

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U swen610; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 3
        done

    - name: Ensure database exists and run schema setup
      run: |
        # Ensure taskmaster database exists
        psql -h localhost -U swen610 -d taskmaster -c "SELECT 1;" || psql -h localhost -U swen610 -d postgres -c "CREATE DATABASE taskmaster;"

        # Run the schema setup (e.g., migrations or SQL setup script)
        psql -h localhost -U swen610 -d taskmaster -f ./src/db/create_test_data.sql

    - name: Start server
      run: python3 src/server.py &  # Running the server in the background

    - name: Wait for the server to be ready
      run: sleep 3

    - name: Run tests
      run: |
        python3 -m coverage run -m unittest -v
        python3 -m coverage report
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
